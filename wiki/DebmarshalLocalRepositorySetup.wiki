#summary Setting up a local debmarshal repository
#labels Phase-Deploy

= Introduction =

This is a setup for a local repository for your own packages on top of a DebmarshalRepositoryMirrorSetup.


= Details =

== Upstream mirror repository ==

Set up a mirror as in DebmarshalrepositoryMirrorSetup.  make sure there is sufficient space for your own local packages (usually very small compared to an upstream repository).

== Your gnupg key ==

If you don't already have a gnupg key, create one (and a revocation certificate.

{{{
gpg --gen-key
[ some interactive questions and passphrase ]
gpg --gen-revoke --armor >mykey.revoke.asc
gpg --armor --export {keyid} >uploader.asc
}}}



== Import uploader's gpg keys ==

{{{
su - debmarshal
gpg --no-default-keyring --keyring ~/.gnupg/trustedkeys.gpg --import uploader.asc
}}}

== Create repository ==

This sets up a repository named local (as opposed to debian or ubuntu), and a distribution track local0 inside that repository (as opposed to lenny for instance).  Using your own descriptive name(s) is advised.

{{{
cd /var/lib/debmarshal
mkdir local local/incoming local/dists local/pool local/dbs local/config
chown -R debmarshal:debmarshal local
chmod 2777 local/incoming
}}}

local/config/repository
----
{{{
Mode: supervised
Component: local
Architectures: i386, amd64

[local0]
Origin: Local
Description: Local packages
Underlying:
 http://localhost/debian lenny/latest
}}}


local/config/local0.spec
----
{{{
# specify policies for which packages go in this distribution track
# List packages by name without revision to track latest versions
# of those.
}}}

== Uploading your packages ==

Sign your packages if debuild didn't already do this.
{{{
for f in *.changes ; do debsign $f ; done
}}}

Copy the signed packages to the incoming directory on the debmarshal host machine.
{{{
cp *.deb *.changes *.diff.gz *.tar.gz *.dsc *.changes \
  /var/lib/debmarshal/local/incoming/
}}}

As the debmarshal user, run enter_incoming.py from the root of the repository.
{{{
su - debmarshal
cd /var/lib/debmarshal/local
/usr/lib/debmarshal/enter_incoming.py
}}}

Verify that the snapshot dist looks correct for the newly uploaded packages.  Normally you wouldn't use the snapshot track (which always has the latest packages just uploaded), but the more carefully maintained local0 track.
{{{
ls -lR dists/snapshot
dists/snapshot:
  ... 0
  ... latest -> 0
dists/snapshot/0:
  ... local
  ... Release
  ... Release.gpg
dists/snapshot/0/local:
  ... binary-amd64
  ... binary-i386
  ... source
dists/snapshot/0/local/binary-amd64:
  ... Packages
  ... Packages.gz
  ... Release
dists/snapshot/0/local/binary-i386:
  ... Packages
  ... Packages.gz
  ... Release
dists/snapshot/0/local/source:
total 12
  ... Release
  ... Sources
  ... Sources.gz
}}}
